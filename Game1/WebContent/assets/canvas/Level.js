
// -- user code here --

/* --- start generated code --- */
// Generated by  1.5.3 (Phaser v2.6.2)


/**
 * Level.
 */
function Level() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level_proto = Object.create(Phaser.State.prototype);
Level.prototype = Level_proto;
Level.prototype.constructor = Level;

Level.prototype.init = function () {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#ffffff';
	
};

Level.prototype.preload = function () {
	
	this.load.pack('img', 'assets/pack.json');
	
};
var fHomeTeam;
Level.prototype.create = function () {
	var _field = this.add.sprite(132.0, 144.0, 'field');
	
	var _ball = this.add.sprite(648.0, 432.0, 'ball');
	_ball.anchor.setTo(0.5, 0.46666590372721356);
	this.game.physics.arcade.enable(_ball);
	_ball.body.setCircle(24.0);
	_ball.body.collideWorldBounds = true;
	_ball.body.bounce.x = 1.0;
	_ball.body.bounce.y = 1.0;
	_ball.body.maxVelocity.x = 600.0;
	_ball.body.maxVelocity.y = 600.0;
	_ball.body.drag.x = 50.0;
	_ball.body.drag.y = 50.0;
	_ball.body.angularVelocity = 100.0;
	
	var _homeTeam = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_homeTeam.position.setTo(-72.0, 108.0);
	_homeTeam.inputEnableChildren = true;
	var _korea_5 = this.add.sprite(396.0, 420.0, 'korea', null, _homeTeam);
	
	var _korea_4 = this.add.sprite(516.0, 120.0, 'korea', null, _homeTeam);
	
	var _korea_3 = this.add.sprite(396.0, 180.0, 'korea', null, _homeTeam);
	
	var _korea_2 = this.add.sprite(276.0, 300.0, 'korea', null, _homeTeam);
	
	var _korea_1 = this.add.sprite(516.0, 480.0, 'korea', null, _homeTeam);
	
	var _awayTeam = this.add.physicsGroup(Phaser.Physics.ARCADE);
	_awayTeam.position.setTo(12.0, 96.0);
	_awayTeam.inputEnableChildren = true;
	var _korea1_5 = this.add.sprite(840.0, 204.0, 'korea2', null, _awayTeam);
	
	var _korea1_4 = this.add.sprite(1020.0, 312.0, 'korea2', null, _awayTeam);
	
	var _korea1_3 = this.add.sprite(972.0, 144.0, 'korea2', null, _awayTeam);
	
	var _korea1_2 = this.add.sprite(972.0, 480.0, 'korea2', null, _awayTeam);
	
	var _korea1_1 = this.add.sprite(840.0, 420.0, 'korea2', null, _awayTeam);
	
	_homeTeam.setAll("body.collideWorldBounds", true);
	_homeTeam.setAll("body.bounce.x", 1.0);
	_homeTeam.setAll("body.bounce.y", 1.0);
	_homeTeam.setAll("body.drag.x", 50);
	_homeTeam.setAll("body.drag.y", 50);
	_homeTeam.setAll("body.maxVelocity.x", 500);
	_homeTeam.setAll("body.maxVelocity.y", 500);
	_awayTeam.setAll("body.collideWorldBounds", true);
	_awayTeam.setAll("body.bounce.x", 1.0);
	_awayTeam.setAll("body.bounce.y", 1.0);
	_awayTeam.setAll("body.drag.x", 50);
	_awayTeam.setAll("body.drag.y", 50);
	_awayTeam.setAll("body.maxVelocity.x", 500);
	_awayTeam.setAll("body.maxVelocity.y", 500);
	
	// fields
	
	this.fField = _field;
	this.fBall = _ball;
	this.fHomeTeam = _homeTeam;
	this.fKorea_5 = _korea_5;
	this.fKorea_4 = _korea_4;
	this.fKorea_3 = _korea_3;
	this.fKorea_2 = _korea_2;
	this.fKorea_1 = _korea_1;
	this.fAwayTeam = _awayTeam;
	this.fKorea1_5 = _korea1_5;
	this.fKorea1_4 = _korea1_4;
	this.fKorea1_3 = _korea1_3;
	this.fKorea1_2 = _korea1_2;
	this.fKorea1_1 = _korea1_1;
	
	
	this.game.physics.arcade.worldBounds = true;
	var bounds = new Phaser.Rectangle(125, 140, 1035, 580);
	this.game.world.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);
	var graphics = this.game.add.graphics(bounds.x, bounds.y);
	graphics.lineStyle(4, 0xffd900, 1);
	this.fBall.body.onWorldBounds = new Phaser.Signal();
	this.fBall.body.onWorldBounds.add(setBounce, this);
	this.fBall.body.onCollide = new Phaser.Signal();
	this.game.camera.bounds.setTo(0, 0, 1280, 720);
	
	graphics2 = this.game.add.graphics(-48, 132 );
	graphics2.lineStyle(4, 0xffd900, 1);
	graphics3 = this.game.add.graphics (36 , 120);
	graphics3.lineStyle(4, 0xA6EC8, 1); 
		
	timer = this.game.time.create(true);
	timer.start(0);
	timer.loop(3000, turnTimer, this);
	this.fHomeTeam.onChildInputDown.add(set, this);
	this.fHomeTeam.onChildInputDown.add(setArrow, this);
	this.fHomeTeam.onChildInputUp.add(shoot, this);
	
	this.fAwayTeam.onChildInputDown.add(set, this);
	this.fAwayTeam.onChildInputDown.add(setArrow, this);
	this.fAwayTeam.onChildInputUp.add(shoot, this);
};
var timer;
var arrow;
var graphics2;
var graphics3;
function setArrow(kicker){
	this.kicker = kicker;
	arrow = this.add.sprite(kicker.x-50, kicker.y+130, 'arrow');
	arrow.anchor.setTo(0, 0.5);
}
function set(kicker){
	this.kicker = kicker;
	kicker.body.moves = false;
	kicker.body.velocity.setTo(0, 0);
}

Level.prototype.update = function(){
	if(arrow!==undefined){
		arrow.rotation = this.game.physics.arcade.angleToPointer(arrow);
	}
	this.game.physics.arcade.collide(this.fBall, this.fHomeTeam);
	this.game.physics.arcade.collide(this.fBall,this.fAwayTeam) ;
	this.game.physics.arcade.collide(this.fHomeTeam);
	this.game.physics.arcade.collide(this.fAwayTeam);
	this.game.physics.arcade.collide(this.fHomeTeam, this.fAwayTeam);
};
/* --- end generated code --- */
// -- user code here --
Level.prototype.render = function(){
	this.game.debug.text("test timer " +parseInt(timer.duration/1000), 600, 32, 'red');
};
var bounce = 1;
function setBounce(fBall){
	if(bounce <= 1){
		if(bounce <= 0.25){
			bounce -= 0.05;
			fBall.body.bounce.x = bounce;
			fBall.body.bounce.y = bounce;
//			console.log("2 bounce: "+bounce);
		}else{
			bounce -= 0.25;
			fBall.body.bounce.x = bounce; 
			fBall.body.bounce.y = bounce;
//			console.log("1bounce: " + bounce);
		}
	}else{
		fBall.body.moves = false;
//		console.log("bounce end");		
	}
}
var turn = 1;
function turnTimer(Level){
	if(turn%2 == 1){ 
		this.fHomeTeam.onChildInputDown.active = true;
		this.fHomeTeam.onChildInputUp.active = true;
		this.fAwayTeam.onChildInputDown.active = false;
		this.fAwayTeam.onChildInputUp.active = false;
		console.log("홈팀 차례");
		graphics3.destroy();
		graphics2 = this.game.add.graphics(-48, 132 );
		graphics2.lineStyle(4, 0xffd900, 1);
		graphics2.drawCircle(this.fKorea_1.x, this.fKorea_1.y, 52);
		graphics2.drawCircle(this.fKorea_2.x, this.fKorea_2.y, 52);
		graphics2.drawCircle(this.fKorea_3.x, this.fKorea_3.y, 52);
		graphics2.drawCircle(this.fKorea_4.x, this.fKorea_4.y, 52);
		graphics2.drawCircle(this.fKorea_5.x, this.fKorea_5.y, 52);
		turn += 1;
	}else{
		this.fAwayTeam.onChildInputDown.active = true;
		this.fAwayTeam.onChildInputUp.active = true;
		this.fHomeTeam.onChildInputDown.active = false;
		this.fHomeTeam.onChildInputUp.active = false;
		console.log("원정팀 차례");
		graphics2.destroy();
		graphics3 = this.game.add.graphics(36 , 120);
		graphics3.lineStyle(4, 0xA6EC8, 1); 
		graphics3.drawCircle(this.fKorea1_1.x, this.fKorea1_1.y, 52);
		graphics3.drawCircle(this.fKorea1_2.x, this.fKorea1_2.y, 52);
		graphics3.drawCircle(this.fKorea1_3.x, this.fKorea1_3.y, 52);
		graphics3.drawCircle(this.fKorea1_4.x, this.fKorea1_4.y, 52);
		graphics3.drawCircle(this.fKorea1_5.x, this.fKorea1_5.y, 52);
		turn += 1;
	}
}
function shoot(kicker){
	arrow.destroy();
	x = this.game.input.activePointer.x;
	y = this.game.input.activePointer.y;
	console.log("mouse.x: "+ x + " mouse.y: " + y);
	console.log("moves.x: "+ arrow.x, "moves.y: "+arrow.y);
	kicker.body.moves = true;
	kicker.body.velocity.setTo((arrow.x-x)*1.5, (arrow.y-y)*1.5);
}
function test(){
	console.log("collide");
}